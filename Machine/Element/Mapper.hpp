#ifndef MAPPER_HPP
#define MAPPER_HPP

#include "../../Util.hpp"

class Mapper{
public:
    Mapper();
    //Encripts the input int based on the given encription vector<int>.
    int getMappedInt(int);
    //Encripts the input int based on the given encription vector<int> and
    //offset generated by successive rotations.
    int getMappedIntRot(int, int);

    //Populates the vector<int> used when trasversing a Rotor FORWARDS.
    void populateForwardRotor(vector<int>);
    //Populates the vector<int> used when trasversing a Rotor BACKWARDS.
    void populateBackwardRotor(vector<int>);
    //Populates the vector<int> used when trasversing a Plugboard.
    void populatePlugboard(vector<int>);
    //Populates the vector<int> used when trasversing a Reflector.
    void populateReflector();

private:
    vector<int> mapping;
};

//Notes on the vector<int> mapping saved by the Mapper:
//
//When given an input:
// 1 2 3 4 5 6 7 8 9 0
//
//The Mapper saves the following mapping:
// [1,1,1,1,1,1,1,1,1,1]
//
//It saves the OFFSETS to be applied to a given input at index n (+rotation).
//
//E.g.
//Input:
// 1 0 3 2 5 4 7 6 9 8
//Mapping:
// [1,9,1,9,1,9,1,9,1,9]
//
//           $ getMappedIntRot(0, 0)
//                     [1,9,1,9,1,9,1,9,1,9]
//           OFFSET = 1 ^                   INDEX = 0
//           > (0+1) = 1
//           $ getMappedIntRot(0, 3)
//                     [1,9,1,9,1,9,1,9,1,9]
//           OFFSET = 9       ^             INDEX = (0+3)
//           > (0+9) = 9
//

#endif
